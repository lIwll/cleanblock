local Joypie			= CS.Joypie;
local UCoreUtil			= Joypie.UCoreUtil;
local UDataMgr			= Joypie.UDataMgr;
local UXMLParser		= Joypie.UXMLParser;
local UXMLSerializer	= Joypie.UXMLSerializer;
local UFileReaderProxy	= Joypie.UFileReaderProxy;

i3k_log	= Joypie.ULogger.Info;
i3k_warn = Joypie.ULogger.Info;

local i3k_db_dungeon_base = i3k_db_dungeon_base;
local i3k_db_spawn_area = i3k_db_spawn_area;

function i3k_game_unload_script(name, script)
	local _script	= script or name;
	_G[name]			= nil;
	package.loaded[_script]	= nil;
	--collectgarbage("collect");
end


function string:split(sep)  
	local sep, fields = sep or "\t", { };

	local pattern = string.format("([^%s]+)", sep);
	self:gsub(pattern, function(c) fields[#fields + 1] = c; end)  
	
	return fields;
end  

function serialize(obj, level, autoReturnLevel, file)  
    local t = type(obj)  
    if t == "number" then  
        file:write(obj)
    elseif t == "boolean" then  
        file:write(tostring(obj))
    elseif t == "string" then  
        file:write(string.format("%q", obj))
    elseif t == "table" then
		local tablestring = ""
		local tablestring2 = ""
		if level <= autoReturnLevel then
			for i=1,level - 1 do
				tablestring = tablestring .. "	"
			end
			tablestring2 = tablestring .. "	"
		end
		file:write("{")
		if level <= autoReturnLevel then
			file:write("\n")
		end
		local vectorkeys = {}
		for k, v in ipairs(obj) do 
			vectorkeys[k] = true
			serialize(v, level + 1, autoReturnLevel, file)
			file:write(", ")
			if level <= autoReturnLevel then
				file:write("\n")
			end
		end
        local hashkeys = {}
		for k, v in pairs(obj) do  
			if vectorkeys[k] == nil then
				table.insert(hashkeys, k)
			end
		end
		table.sort(hashkeys , function(a , b)
			local typeA = type(a)
			local typeB = type(b)
			if typeA ~= typeB then
				if typeA == "number" then
					return true
				end
				if typeB == "number" then
					return false
				end
			end
			return tostring(a) < tostring(b)
		end)  
		for _, v in ipairs(hashkeys) do
			if type(v) == "string" and not string.find(v, "^%d") then
				file:write(tablestring2 .. v .. " = ")
				serialize(obj[v], level + 1, autoReturnLevel, file)
				file:write(", ")
			else
				file:write(tablestring2 .. "[")
				serialize(v, level + 1, autoReturnLevel, file)
				file:write("] = ")
				serialize(obj[v], level + 1, autoReturnLevel, file)
				file:write(", ")
			end
			if level <= autoReturnLevel then
				file:write("\n")
			end
		end
		file:write(tablestring .. "}")
	elseif t == "nil" then  
		return nil  
	else  
		error("can not serialize a " .. t .. " type.")  
	end  
end  

function SaveZoneMap(zones)
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_zone_map.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_zone_map =\n");
	f:write("{\n");
		--{id=id,isMain=isMain,isExit=isExit,area = area,AllowFly = AllowFly,PKType = PKType,AllowTrade = AllowTrade,AutoOpen = AutoOpen,Exclusive = Exclusive,polygons = polygons}
	for k1, v2 in pairs(zones) do
		local nnn = ""
		for k,v in pairs(v2) do
			local cfg = ""
			local pos = ""
			for i,v1 in ipairs(v.polygons) do
				pos = pos..string.format("{x = %f, y = %f, z = %f},",v1.x,v1.y,v1.z)
			end
			local cfg = string.format("[%d] = { id = %d,isMain=%s,isExit=%s,area = {x = %f, y = %f},attribute={%s,%s,%s,%s,%s},polygons={%s} } \t,",
										v.id,v.id,tostring(v.isMain),tostring(v.isExit),v.area.x,v.area.y,tostring(v.AllowFly),v.PKType,tostring(v.AllowTrade),tostring(v.AutoOpen),tostring(v.Exclusive),pos)
			nnn = nnn..string.format("%s",cfg)
		end
		f:write(string.format("	[%d] = {%s },\n", k1, nnn));
	end

	f:write("};\n");
	f:write("\n");
	
	f:close();

	return true;
end

function SavePlayerMap(map_players)
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_player_map.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_player_map =\n");
	f:write("{\n");

	for k, v in pairs(map_players) do
		local cfg = ""
		for i,v1 in ipairs(v) do
			cfg = string.format("%s[%d] = {pos = { x = %s, y = %s, z = %s }, rotation = {x = %f, y = %f, z = %f} }, ", cfg, i, v1.pos.x, v1.pos.y, v1.pos.z, v1.rotation.x, v1.rotation.y, v1.rotation.z)
		end
		f:write(string.format("	[%d] = {%s },\n", k, cfg));
		-- f:write(string.format("	[%d] = { index = %d, pos = { x = %s, y = %s, z = %s }, rotation = {x = %f, y = %f, z = %f} },\n", k, v.index, v.pos.x, v.pos.y, v.pos.z, v.rotation.x, v.rotation.y, v.rotation.z));
	end

	f:write("};\n");
	f:write("\n");
	
	--serialize(map_players, 1, 100, f)

	f:close();

	return true;
end

function SaveTeleport(teleportSpawns, teleports, mapTeleports)
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_teleport_info.lua";
	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_teleport_spawns =\n");
	f:write("{\n");
	
	for k, v in pairs(teleportSpawns) do
		if next(v) then
			f:write(string.format("	[%d] = { mapID = %d, teleport_spawns = {\n", k, k));
			for k1, v1 in pairs(v) do
				f:write(string.format("	         [%d] = { id = %d, pos = {x = %s, y = %s, z = %s}}, \n", k1, k1, v1.x, v1.y, v1.z));
			end
			f:write("        }},\n");
		end
	end
	
	f:write("};\n");
	f:write("\n");
	
	--serialize(SaveTeleport, 1, 100, f)
	
	f:write("\n");
	f:write("i3k_db_teleport_pos =\n");
	f:write("{\n");

	for k, v in pairs(teleports) do
		f:write(string.format("	[%d] = { id = %d, pos = {x = %s, y = %s, z = %s}}, \n", k, k, v.x, v.y, v.z));
	end
	
	f:write("};\n");
	f:write("\n");
	
	--serialize(teleports, 1, 100, f)

	f:write("\n");
	f:write("i3k_db_map_teleports =\n");
	f:write("{\n");
	
	for k, v in pairs(mapTeleports) do
		if next(v) then
			f:write(string.format("	[%d] = { mapID = %d, teleport_ids = {", k, k));
			for _, v1 in ipairs(v) do
				f:write(string.format("%s, ", v1));
			end
			f:write("}},\n");
		end
	end
	
	f:write("};\n");
	
	--serialize(mapTeleports, 1, 100, f)
	
	f:close()
end

function SaveMonsters(monsters)
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_monster_pos.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_monster_pos =\n");
	f:write("{\n");

	for k, v in pairs(monsters) do
		f:write(string.format("	[%d] = { mapID = %d, monsters = {\n", k, k));
		for k1, v1 in pairs(v) do
			f:write(string.format("	         [%d] = { id = %d, pos = {x = %s, y = %s, z = %s}}, \n", k1, k1, v1.pos.x, v1.pos.y, v1.pos.z));
		end
		f:write("        }},\n");
	end

	f:write("};\n");
	f:write("\n");
	
	--serialize(monsters, 1, 100, f)

	f:close();
	
	fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_monster_area.lua";
	f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_monster_area =\n");
	f:write("{\n");

	for k, v in pairs(monsters) do
		for k1, v1 in pairs(v) do
			f:write(string.format("	[%d] = { id = %d,  mapID = %d}, \n", k1, k1, k));
		end
	end

	f:write("};\n");
	f:write("\n");

	f:close();
	return true;
end

function SaveMonsterMap(map_monsters)
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_monster_map.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_monster_map =\n");
	f:write("{\n");
	local str = ""
	for k, v in pairs(map_monsters) do
		for _,e in ipairs(v.point) do
			str = str..e..","
		end
		f:write(string.format("	[%d] = { mapID = %d, pos = { x = %s, y = %s, z = %s },point = {%s}},\n", k, v.mapID, v.pos.x, v.pos.y, v.pos.z,str));
		str = ""
	end

	f:write("};\n");
	f:write("\n");
	
	--serialize(map_monsters, 1, 100, f)

	f:close();

	return true;
end

function SaveNPCs(npcs)
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_npc_pos.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_npc_pos =\n");
	f:write("{\n");

	for k, v in pairs(npcs) do
		f:write(string.format("	[%d] = { mapID = %d, npcs = {\n", k, k));
		for k1, v1 in pairs(v) do
			f:write(string.format("	         [%d] = { id = %d, pos = {x = %s, y = %s, z = %s}, rotation = {x = %f, y = %f, z = %f}}, \n", k1, k1, v1.pos.x, v1.pos.y, v1.pos.z, v1.rotation.x, v1.rotation.y, v1.rotation.z));
		end
		f:write("        }},\n");
	end

	f:write("};\n");
	f:write("\n");
	
	--serialize(npcs, 1, 100, f)

	f:close();

	return true;
end


function SetTraps(traps)
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_trap_pos.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_trap_pos =\n");
	f:write("{\n");

	for k, cTraps in pairs(traps) do
		f:write(string.format("	[%d] = { traps = {\n", k));
		for k1, v1 in pairs(cTraps) do
			f:write(string.format("			[%d] = {\n",k1));
			for i,v2 in ipairs(v1) do
				f:write(string.format(" 				{ pos = {x = %s, y = %s, z = %s}, rotation = {x = %f, y = %f, z = %f} }, \n", v2.pos.x, v2.pos.y, v2.pos.z, v2.rotation.x, v2.rotation.y, v2.rotation.z));
			end
			f:write("			},\n");
		end
		f:write("        }},\n");
	end

	f:write("};\n");
	f:write("\n");
	
	f:close();

	return true;
end

function SaveNPCMap(map_npcs)
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_npc_map.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_npc_map =\n");
	f:write("{\n");

	for k, v in pairs(map_npcs) do
		f:write(string.format("	[%d] = { id = %d, mapID = %d, pos = { x = %s, y = %s, z = %s }, rotation = {x = %f, y = %f, z = %f}},\n", k, k, v.mapID, v.pos.x, v.pos.y, v.pos.z, v.rotation.x, v.rotation.y, v.rotation.z));
	end

	f:write("};\n");
	f:write("\n");
	
	--serialize(map_npcs, 1, 100, f)

	f:close();

	return true;
end

function SaveMines(mines)
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_mine_pos.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_mine_pos =\n");
	f:write("{\n");

	for k, v in pairs(mines) do
		f:write(string.format("	[%d] = { mapID = %d, mines = {\n", k, k));
		for k1, v1 in pairs(v) do
			f:write(string.format("	         [%d] = { id = %d, poses = {\n", k1, k1));
			for k2, v2 in pairs(v1.poses) do
				f:write(string.format("	               [%d] = { pointid = %d, pos = { x = %s, y = %s, z = %s}, rotation = {x = %f, y = %f, z = %f} },\n", k2, k2, v2.pos.x, v2.pos.y, v2.pos.z, v2.rotation.x, v2.rotation.y, v2.rotation.z));
			end
			f:write("    	    }},\n");
		end
		f:write("        }},\n");
	end

	f:write("};\n");
	f:write("\n");
	
	--serialize(mines, 1, 100, f)

	f:close();

	return true;
end

function SaveMineMap(map_mines)
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_mine_map.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_mine_map =\n");
	f:write("{\n");

	for k, v in pairs(map_mines) do
		f:write(string.format("	[%d] = { id = %d, mapID = %d, pointid = %d, pos = { x = %s, y = %s, z = %s }, rotation = {x = %f, y = %f, z = %f} },\n", k, k, v.mapID, v.pointID, v.pos.x, v.pos.y, v.pos.z, v.rotation.x, v.rotation.y, v.rotation.z));
	end

	f:write("};\n");
	f:write("\n");
	
	--serialize(map_mines, 1, 100, f)

	f:close();

	return true;
end

function SetTowerDefendData()

	local temp = {}
	for k,v in pairs(i3k_db_towerDefence) do
		-- i3k_log("ADASD:"..v.openDate)
		local canExport = string.find(v.openDate, '-')
		if not canExport then
			return
		end
		local tmpValue = {}
		local openDate = string.split(v.openDate, '-')
		tmpValue.openDate = os.time({day=openDate[3], month=openDate[2], year=openDate[1], hour=0, minute=0, second=0})
		local closeDate = string.split(v.closeDate, '-')
		tmpValue.closeDate = os.time({day=closeDate[3], month=closeDate[2], year=closeDate[1], hour=0, minute=0, second=0})

		temp[k] = tmpValue
	end

	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_towerDefenceOpenCloseDate.lua"
	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end
	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_towerDefenceOpenCloseDate =\n");
	f:write(serialize(temp, 1, 1, f))
	f:write("\n");
end

function SetMainTaskKey()
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_taskorder.lua"
	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end
	local temp = {}
	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_taskorder =\n");
	local idx = 1
	local taskID = 1
	while true do
		temp[taskID] = idx
		idx  = idx  + 1
		if i3k_db_mainTask[taskID] == nil or i3k_db_mainTask[taskID].nextId == nil or i3k_db_mainTask[taskID].nextId == 0 then
			break
		end
		taskID = i3k_db_mainTask[taskID].nextId
	end

	f:write(serialize(temp, 1, 1, f))
	f:write("\n");
end

function CalculationWingUnlockBaseData()
	local unlock_data = {}
	local wing_order = i3k_db_wing_base[1].WingOrder
	local temp = {}
	for i,v in ipairs(wing_order) do
		local wing = i3k_db_wing[v]
		local preId = i == 1 and -1 or wing_order[i - 1]
		local bless_data = i3k_db_wing_bless[v]
		local unlock_attrs = bless_data[1].attrs
		temp = {id = v, modelId = wing.ModelID, type = wing.Type, preId = preId, activeId = 0, unlock_attrs = unlock_attrs}
		unlock_data[v] = temp
	end

	for k,v in pairs(i3k_db_wing) do
		if v.activeid ~= 0 then
			local unlock_attrs = i3k_db_wing_skin[k].Props
			temp = {id = k, modelId = v.ModelID, type = v.Type, preId = 0, activeId = v.activeid, unlock_attrs = unlock_attrs}
			unlock_data[k] = temp
		end
	end

	return unlock_data
end

function SaveWingUnlockBaseData()
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_wing_unlock_base_data.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_wing_unlock_base_data =\n");
	f:write("{\n");
	
	local unlock_data = CalculationWingUnlockBaseData()

	for k,v in pairs(unlock_data) do
		local txt_attrs = ""
		for i,attr in ipairs(v.unlock_attrs) do
			txt_attrs = string.format("%s[%d] = %s, ", txt_attrs, attr.ID or attr.id, attr.Val or attr.value)
		end
		f:write(string.format("\t[%d] = {id = %s, modelId = %s, type = %s, preId = %s, activeId = %s, itemCount = 1, unlock_attrs = {%s},},\n", k, v.id, v.modelId, v.type, v.preId, v.activeId, txt_attrs));
	end

	f:write("};\n");
	f:write("\n");
	
	f:close();

	return true;
end

function CalculationWeaponUnlockBaseData()
	local unlock_data = {}

	for k,v in pairs(i3k_db_weapons) do
		local temp = {}
		local temp1 = i3k_db_weaponLevelUp[k][1].attrs
		local temp2 = i3k_db_weaponStarUp[k][v.initStar].attrs
		for k1,v1 in pairs(temp1) do
			table.insert(temp, {id = v1.id, value = v1.value})
		end
		for k2,v2 in pairs(temp2) do
			local has = false
			for kk,vv in pairs(temp) do
				if vv.id == v2.id then
					vv.value = vv.value + v2.value
					has = true
					break
				end
			end
			if not has then
				table.insert(temp, {id = v2.id, value = v2.value})
			end
		end
		unlock_data[k] = {id = k, modelId = v.showModuleID, activeId = v.useId, itemCount = v.useCount, unlock_attrs = temp}
	end

	return unlock_data
end

function SaveWeaponUnlockBaseData()
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_weapon_unlock_base_data.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_weapon_unlock_base_data =\n");
	f:write("{\n");
	
	local unlock_data = CalculationWeaponUnlockBaseData()

	for k,v in pairs(unlock_data) do
		local txt_attrs = ""
		for i,attr in ipairs(v.unlock_attrs) do
			txt_attrs = string.format("%s[%d] = %s, ", txt_attrs, attr.id, attr.value)
		end
		f:write(string.format("\t[%d] = {id = %s, modelId = %s, activeId = %s, itemCount = %s, unlock_attrs = {%s},},\n", k, v.id, v.modelId, v.activeId, v.itemCount, txt_attrs));
	end

	f:write("};\n");
	f:write("\n");
	
	f:close();

	return true;
end

function CalculationElementUnlockBaseData()
	local unlock_data = {}

	for k,v in pairs(i3k_db_elementSoul) do
		local unlock_attrs = v.props
		unlock_data[k] = {id = k, modelId = v.modelId, activeId = v.activeItemId, itemCount = v.activeItemCount, unlock_attrs = unlock_attrs}
	end

	return unlock_data
end

function SaveElementUnlockBaseData()
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_element_soul_unlock_base_data.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_element_soul_unlock_base_data =\n");
	f:write("{\n");
	
	local unlock_data = CalculationElementUnlockBaseData()

	for k,v in pairs(unlock_data) do
		local txt_attrs = ""
		for i,attr in ipairs(v.unlock_attrs) do
			txt_attrs = string.format("%s[%d] = %s, ", txt_attrs, attr.id, attr.value)
		end
		f:write(string.format("\t[%d] = {id = %s, modelId = %s, activeId = %s, itemCount = %s, unlock_attrs = {%s},},\n", k, v.id, v.modelId, v.activeId, v.itemCount, txt_attrs));
	end

	f:write("};\n");
	f:write("\n");
	
	f:close();

	return true;
end

function get_attr(base,inc1,inc2, inc3, level)
	local value = (level -1)*(level -1)*(level - 1)*inc1 + (level - 1)*(level - 1)*inc2 + (level - 1)*inc3 + base
	value = math.modf(value)
	return value
end

function CalculationPetUnlockBaseData()
	local unlock_data = {}

	for id,v in pairs(i3k_db_pet) do
		local baseProp = {}
		baseProp[2001] = get_attr(v.HP, v.HP_Inc1, v.HP_Inc2, v.HP_Inc3, v.startLevel)
		baseProp[2011] = get_attr(v.Atk_M, v.Atk_M_Inc1, v.Atk_M_Inc2, v.Atk_M_Inc3, v.startLevel)
		baseProp[2021] = get_attr(v.Atk_S, v.Atk_S_Inc1, v.Atk_S_Inc2, v.Atk_S_Inc3, v.startLevel)
		baseProp[2012] = get_attr(v.Def_M, v.Def_M_Inc1, v.Def_M_Inc2, v.Def_M_Inc3, v.startLevel)
		baseProp[2022] = get_attr(v.Def_S, v.Def_S_Inc1, v.Def_S_Inc2, v.Def_S_Inc3, v.startLevel)
		baseProp[2013] = get_attr(v.Pierce_M, v.Pierce_M_Inc1, v.Pierce_M_Inc2, v.Pierce_M_Inc3, v.startLevel)
		baseProp[2023] = get_attr(v.Pierce_S, v.Pierce_S_Inc1, v.Pierce_S_Inc2, v.Pierce_S_Inc3, v.startLevel)
		baseProp[2031] = get_attr(v.Atr, v.Atr_Inc1, v.Atr_Inc2, v.Atr_Inc3, v.startLevel)
		baseProp[2033] = get_attr(v.Ctr, v.Ctr_Inc1, v.Ctr_Inc2, v.Ctr_Inc3, v.startLevel)
		baseProp[2041] = get_attr(v.Acr, v.Acr_Inc1, v.Acr_Inc2, v.Acr_Inc3, v.startLevel)
		baseProp[2044] = get_attr(v.Tou, v.Tou_Inc1, v.Tou_Inc2, v.Tou_Inc3, v.startLevel)
		local startStar = v.startStar
		if startStar > 0 then
			local props = i3k_db_petUpStar[id][startStar].props
			for _,prop in pairs(props) do
				if not baseProp[prop.id] then
					baseProp[prop.id] = prop.value
				else
					baseProp[prop.id] = baseProp[prop.id] + prop.value
				end
			end
		end
		unlock_data[id] = {id = id, modelId = v.ModelID, activeId = v.makeConsumeItem, itemCount = v.makeConsumeItemCount, unlock_attrs = baseProp}
	end
	return unlock_data
end

function SavePetUnlockBaseData()
	local fn = "../client/Client_Data/StreamingAssets/script/gamedb/i3k_db_pet_unlock_base_data.lua";

	local f = io.open(fn, "w");
	if f == nil then
		return false;
	end

	f:write("-- this script is auto generated by excel db.\n");
	f:write("--      please don`t modify it.\n");
	f:write("\n");
	f:write("i3k_db_pet_unlock_base_data =\n");
	f:write("{\n");
	
	local unlock_data = CalculationPetUnlockBaseData()

	for k,v in pairs(unlock_data) do
		local txt_attrs = ""
		for propId,prop in pairs(v.unlock_attrs) do
			txt_attrs = string.format("%s[%d] = %s, ", txt_attrs, propId, prop)
		end
		f:write(string.format("\t[%d] = {id = %s, modelId = %s, activeId = %s, itemCount = %s, unlock_attrs = {%s},},\n", k, v.id, v.modelId, v.activeId, v.itemCount, txt_attrs));
	end

	f:write("};\n");
	f:write("\n");
	
	f:close();

	return true;
end